# Maintainer: Stefan Wagner <stw@bit-strickerei.de>
# Contributor: Stefan Wagner <stw@bit-strickerei.de>

_buildflavor="t430"
_config=config-$_buildflavor.${CARCH}
pkgname=linux-$_buildflavor
pkgver=4.9.50
case $pkgver in
*.*.*)	_kernver=${pkgver%.*};;
*.*)	_kernver=${pkgver};;
esac
pkgrel=0
pkgdesc="Linux kernel with grsecurity"
url=http://grsecurity.net
arch="x86_64"
license="GPL2"
depends="mkinitfs linux-firmware"
makedepends="perl sed installkernel bash gmp-dev bc linux-headers mpfr-dev
	mpc1-dev ncurses-dev"
options="!strip"
install=
subpackages="$pkgname-dev"
source="https://kernel.org/pub/linux/kernel/v4.x/linux-$_kernver.tar.xz
	https://kernel.org/pub/linux/kernel/v4.x/patch-$pkgver.xz
	http://dev.alpinelinux.org/~ncopa/grsec/hardened-3.1-$pkgver-201704252333-alpine.patch

	config-t430.x86_64"
builddir="$srcdir"/build-$_buildflavor

prepare() {
	local _patch_failed=
	cd "$srcdir"/linux-$_kernver
	if [ "${pkgver%.0}" = "$pkgver" ]; then
		msg "Applying patch-$pkgver.xz"
		unxz -c < "$srcdir"/patch-$pkgver.xz | patch -p1 -N || return 1
	fi

	# first apply patches in specified order
	for i in $source; do
		local file=${i%::*}
		case $file in
		*.patch)
			msg "Applying $file..."
			if ! patch -s -p1 -N -i "$srcdir"/${file##*/}; then
				echo $file >>failed
				_patch_failed=1
			fi
			;;
		esac
	done

	if ! [ -z "$_patch_failed" ]; then
		error "The following patches failed:"
		cat failed
		return 1
	fi

	# remove localversion from patch if any
	rm -f localversion*

	mkdir -p "$builddir"

	echo "-$pkgrel-$_buildflavor" > "$builddir"/localversion-alpine \
		|| return 1

	cp "$srcdir"/$_config "$builddir"/.config || return 1
	make -C "$srcdir"/linux-$_kernver \
		O="$builddir" \
		HOSTCC="${CC:-gcc}" \
		silentoldconfig || return 1
}

menuconfig() {
	cd "$builddir" || return 1
	make ARCH="${CARCH}" menuconfig
	cp .config "$startdir"/$_config
}

build() {
	cd "$builddir" || return 1
	make CC="${CC:-gcc}" \
		KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-Alpine" \
		|| return 1
}

package() {
	local _abi_release=${pkgver}-${pkgrel}-${_buildflavor}

	cd "$builddir"

	mkdir -p "$pkgdir"/boot "$pkgdir"/lib/modules

	make -j1 modules_install firmware_install install \
		INSTALL_MOD_PATH="$pkgdir" INSTALL_PATH="$pkgdir"/boot || return 1

	rm -f "$pkgdir"/lib/modules/${_abi_release}/build \
		"$pkgdir"/lib/modules/${_abi_release}/source
	rm -rf "$pkgdir"/lib/firmware

	install -D include/config/kernel.release \
		"$pkgdir"/usr/share/kernel/$_buildflavor/kernel.release
}

dev() {
	local _abi_release=${pkgver}-${pkgrel}-${_buildflavor}
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# simlar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for $_buildflavor kernel"
	depends="gmp-dev bash"
	local dir="$subpkgdir"/usr/src/linux-headers-${_abi_release}

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	cp "$srcdir"/config-$_buildflavor.${CARCH} "$dir"/.config
	echo "-$pkgrel-$_buildflavor" > "$dir"/localversion-alpine \
		|| return 1
	make -j1 -C "$srcdir"/linux-$_kernver O="$dir" HOSTCC="${CC:-gcc}" \
		silentoldconfig prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the soruces
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$srcdir"/linux-$_kernver
	find . -path './include/*' -prune \
		   -o -path './scripts/*' -prune -o -type f \
		   \( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
			 -name '*.sh' -o -name '*.pl' -o -name '*.lds' \) \
		   -print | cpio -pdm "$dir" || return 1
	cp -a scripts include "$dir" || return 1
	find $(find arch -name include -type d -print) -type f \
		| cpio -pdm "$dir"

	install -Dm644 "$builddir"/Module.symvers "$dir"/Module.symvers

	mkdir -p "$subpkgdir"/lib/modules/${_abi_release}
	ln -sf /usr/src/linux-headers-${_abi_release} \
		"$subpkgdir"/lib/modules/${_abi_release}/build

}

sha512sums="bf67ff812cc3cb7e5059e82cc5db0d9a7c5637f7ed9a42e4730c715bf7047c81ed3a571225f92a33ef0b6d65f35595bc32d773356646df2627da55e9bc7f1f1a  linux-4.9.tar.xz
752b09fc50f1f91bbf0b1ea7c49b7cc2bb601103c90de80086dde0e3baa745ebcdb0d953ac49c3db5d8dcd95cfdc45e09d29e7304f1baf2666889464fd70a39b  patch-4.9.50.xz
205a75130683365a75e9f58c01c99ff251076f3006fe582883efc1f29a5207c8da61e4261ce8f19de222ec310fd2404123b29d51edcbd235d30b30637efbcf0e  hardened-3.1-4.9.50-201704252333-alpine.patch
1dca7b9dce43caf176530b7b49af67b43a203396f4a78ccfad24ff1b86d6fc49e9631f374748e9612cd84d3ac1b785e8c0c4cc3983eb30a147f45e562d08e07e  config-t430.x86_64"
